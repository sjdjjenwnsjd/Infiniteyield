local Library = {}
Library.__index = Library

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Utils
local function create(inst, props)
    local obj = Instance.new(inst)
    for k,v in pairs(props or {}) do obj[k] = v end
    return obj
end

-- Main Library constructor
function Library.new()
    local self = setmetatable({}, Library)
    self.Windows = {}
    return self
end

function Library:CreateWindow(title)
    local Window = {}
    Window.__index = Window
    local self = setmetatable({}, Window)

    -- Create main frame in CoreGui
    self.Frame = create("Frame", {
        Name = "InfiniteYieldUI",
        Parent = CoreGui,
        BackgroundColor3 = Color3.fromRGB(36, 36, 37),
        BorderSizePixel = 0,
        Size = UDim2.new(0, 250, 0, 400),
        Position = UDim2.new(0, 50, 0, 50),
        Active = true,
        ZIndex = 10,
    })

    -- Title bar
    self.Title = create("TextLabel", {
        Parent = self.Frame,
        BackgroundColor3 = Color3.fromRGB(36, 36, 37),
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 20),
        Font = Enum.Font.SourceSans,
        TextSize = 18,
        TextColor3 = Color3.new(1,1,1),
        Text = title or "Infinite Yield",
        ZIndex = 10,
    })

    -- Command bar
    self.Cmdbar = create("TextBox", {
        Parent = self.Frame,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 20),
        Size = UDim2.new(1, -10, 0, 25),
        Font = Enum.Font.SourceSans,
        TextSize = 18,
        TextColor3 = Color3.new(1, 1, 1),
        PlaceholderText = "Command Bar",
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 10,
    })

    -- Command list container (scrolling)
    self.CmdList = create("ScrollingFrame", {
        Parent = self.Frame,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 5, 0, 45),
        Size = UDim2.new(1, -10, 0, 175),
        ScrollBarThickness = 8,
        VerticalScrollBarInset = Enum.ScrollBarInset.Always,
        ZIndex = 10,
    })

    -- List layout for commands
    self.CmdListLayout = create("UIListLayout", {
        Parent = self.CmdList,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 4),
    })

    self.Commands = {}
    self.CommandLabels = {}

    -- Setup command bar enter key
    self.Cmdbar.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local text = self.Cmdbar.Text:match("^%s*(.-)%s*$")
            if text ~= "" then
                self:RunCommand(text)
            end
            self.Cmdbar.Text = ""
        end
    end)

    -- Dragging window support
    local dragging, dragInput, dragStart, startPos
    self.Title.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.Frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    self.Title.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    RunService.RenderStepped:Connect(function()
        if dragging and dragInput then
            local delta = dragInput.Position - dragStart
            self.Frame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)

    return self
end

function Library:CreateWindow(...)
    error("Use Library.new():CreateWindow() instead")
end

function Library:RunCommand(text)
    local args = {}
    for word in text:gmatch("%S+") do
        table.insert(args, word)
    end
    local cmdName = args[1] and args[1]:lower()
    if not cmdName then return end

    local cmdData
    for _, cmd in pairs(self.Commands or {}) do
        if cmd.Name:lower() == cmdName then
            cmdData = cmd
            break
        end
    end

    if cmdData and cmdData.Callback then
        local params = {}
        for i = 2, #args do
            params[#params + 1] = args[i]
        end
        local success, err = pcall(function()
            cmdData.Callback(unpack(params))
        end)
        if not success then
            warn("[InfiniteYield] Command error: " .. tostring(err))
        end
    else
        warn("[InfiniteYield] Unknown command: " .. tostring(cmdName))
    end
end

function Library:CreateCommand(name, args, callback)
    error("Use Window:CreateCommand() on the window instance, not Library:CreateCommand()")
end

-- Window methods
local WindowMethods = {}

function WindowMethods:CreateCommand(name, args, callback)
    local cmd = {
        Name = name,
        Args = args,
        Callback = callback,
    }
    table.insert(self.Commands, cmd)

    -- Create label
    local label = Instance.new("TextLabel")
    label.Name = "CmdLabel_"..name
    label.Parent = self.CmdList
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, -10, 0, 22)
    label.Font = Enum.Font.SourceSans
    label.TextSize = 18
    label.TextColor3 = Color3.new(1,1,1)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.ZIndex = 10
    label.Text = name .. (args and (" "..args) or "")
    table.insert(self.CommandLabels, label)
    return cmd
end

-- Hook Window methods
Library.__index = function(tbl, key)
    if key == "CreateWindow" then
        return function(...)
            return Library.CreateWindow(Library, ...)
        end
    end
    if rawget(tbl, key) then
        return rawget(tbl, key)
    end
    if tbl == Library then
        return Library[key]
    end
end

-- Bind Window methods on window instances
local mt = {
    __index = function(self, k)
        return WindowMethods[k] or rawget(self, k)
    end
}

-- Patch Window object returned from CreateWindow
local oldCreateWindow = Library.CreateWindow
Library.CreateWindow = function(self, title)
    local win = oldCreateWindow(self, title)
    return setmetatable(win, mt)
end

return setmetatable(Library, {
    __call = function(_, ...)
        return Library.new(...)
    end
})
