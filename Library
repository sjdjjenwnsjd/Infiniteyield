-- InfiniteYieldStyleLibrary.lua
local Library = {}
Library.__index = Library

-- Services
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Helper functions
local function randomString(length)
	length = length or 8
	local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	local str = ""
	for i = 1, length do
		str = str .. chars:sub(math.random(1,#chars), math.random(1,#chars))
	end
	return str
end

local function create(inst, props)
	local obj = Instance.new(inst)
	for k,v in pairs(props) do
		if k == "Parent" then
			obj.Parent = v
		else
			obj[k] = v
		end
	end
	return obj
end

function Library.new(title)
	local self = setmetatable({}, Library)
	self.TitleText = title or "Infinite Yield FE"
	self.Commands = {}
	self.KeepOpen = false
	self.LastInput = tick()
	self:BuildUI()
	self:SetupEvents()
	self:StartAutoMinimize()
	return self
end

function Library:BuildUI()
	local PlayerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
	self.ScreenGui = create("ScreenGui", {
		Name = "InfiniteYieldStyleUI_"..randomString(5),
		ResetOnSpawn = false,
		Parent = PlayerGui
	})

	-- Main Holder Frame
	self.Holder = create("Frame", {
		Name = "Holder",
		Parent = self.ScreenGui,
		Size = UDim2.new(0, 280, 0, 280),
		Position = UDim2.new(0, 50, 0, 50),
		BackgroundColor3 = Color3.fromRGB(36, 36, 37),
		BorderSizePixel = 0,
		Active = true,
		ZIndex = 10,
	})

	-- Title Bar
	self.TitleBar = create("Frame", {
		Name = "TitleBar",
		Parent = self.Holder,
		Size = UDim2.new(1, 0, 0, 26),
		BackgroundColor3 = Color3.fromRGB(46, 46, 47),
		BorderSizePixel = 0,
		Active = true,
	})
	self.TitleLabel = create("TextLabel", {
		Name = "TitleLabel",
		Parent = self.TitleBar,
		Text = self.TitleText,
		Font = Enum.Font.SourceSansBold,
		TextSize = 18,
		TextColor3 = Color3.new(1, 1, 1),
		BackgroundTransparency = 1,
		Size = UDim2.new(1, -30, 1, 0),
		TextXAlignment = Enum.TextXAlignment.Left,
		Position = UDim2.new(0, 10, 0, 0),
		ZIndex = 11,
	})

	-- Settings Button (gear icon)
	self.SettingsButton = create("ImageButton", {
		Name = "SettingsButton",
		Parent = self.TitleBar,
		Size = UDim2.new(0, 24, 0, 24),
		Position = UDim2.new(1, -30, 0, 1),
		BackgroundTransparency = 1,
		Image = "rbxassetid://3926307971", -- gear icon from Roblox
		ImageColor3 = Color3.fromRGB(200, 200, 200),
		ZIndex = 11,
	})

	-- Command Bar (TextBox)
	self.CommandBar = create("TextBox", {
		Name = "CommandBar",
		Parent = self.Holder,
		Size = UDim2.new(1, -20, 0, 30),
		Position = UDim2.new(0, 10, 0, 35),
		BackgroundColor3 = Color3.fromRGB(46, 46, 47),
		BorderSizePixel = 0,
		Font = Enum.Font.SourceSans,
		TextSize = 18,
		TextColor3 = Color3.new(1, 1, 1),
		PlaceholderText = "Command Bar",
		ClearTextOnFocus = false,
		TextXAlignment = Enum.TextXAlignment.Left,
		ZIndex = 10,
	})

	-- Command List Frame (ScrollingFrame)
	self.CommandListFrame = create("ScrollingFrame", {
		Name = "CommandListFrame",
		Parent = self.Holder,
		Size = UDim2.new(1, -20, 1, -80),
		Position = UDim2.new(0, 10, 0, 70),
		BackgroundColor3 = Color3.fromRGB(46, 46, 47),
		BorderSizePixel = 0,
		ScrollBarThickness = 8,
		CanvasSize = UDim2.new(0, 0, 0, 0),
		VerticalScrollBarInset = Enum.ScrollBarInset.Always,
		ZIndex = 10,
	})

	self.CommandListLayout = create("UIListLayout", {
		Name = "ListLayout",
		Parent = self.CommandListFrame,
		SortOrder = Enum.SortOrder.LayoutOrder,
		Padding = UDim.new(0, 4),
	})

	-- Settings Panel (initially hidden)
	self.SettingsPanel = create("Frame", {
		Name = "SettingsPanel",
		Parent = self.Holder,
		Size = UDim2.new(1, 0, 0, 90),
		Position = UDim2.new(0, 0, 1, 0),
		BackgroundColor3 = Color3.fromRGB(46, 46, 47),
		BorderSizePixel = 0,
		Visible = false,
		ZIndex = 12,
	})

	-- Keep Open Toggle TextLabel
	self.KeepOpenLabel = create("TextLabel", {
		Name = "KeepOpenLabel",
		Parent = self.SettingsPanel,
		Text = "Keep Menu Open",
		Font = Enum.Font.SourceSans,
		TextSize = 16,
		TextColor3 = Color3.new(1,1,1),
		BackgroundTransparency = 1,
		Position = UDim2.new(0, 10, 0, 10),
		Size = UDim2.new(0.7, 0, 0, 25),
		TextXAlignment = Enum.TextXAlignment.Left,
	})

	-- Keep Open Toggle Button
	self.KeepOpenToggle = create("TextButton", {
		Name = "KeepOpenToggle",
		Parent = self.SettingsPanel,
		Text = "Off",
		Font = Enum.Font.SourceSansBold,
		TextSize = 16,
		TextColor3 = Color3.new(1,1,1),
		BackgroundColor3 = Color3.fromRGB(78, 78, 79),
		Position = UDim2.new(0.75, 0, 0, 10),
		Size = UDim2.new(0, 50, 0, 25),
		AutoButtonColor = false,
	})

	-- Edit Theme Button (will open ColorPicker)
	self.EditThemeButton = create("TextButton", {
		Name = "EditThemeButton",
		Parent = self.SettingsPanel,
		Text = "Edit Theme",
		Font = Enum.Font.SourceSans,
		TextSize = 16,
		TextColor3 = Color3.new(1,1,1),
		BackgroundColor3 = Color3.fromRGB(78, 78, 79),
		Position = UDim2.new(0, 10, 0, 45),
		Size = UDim2.new(0.9, 0, 0, 30),
		AutoButtonColor = false,
	})

	-- (Optional) Color Picker placeholder (implement your own color picker here)
	self.ColorPicker = nil

	-- Table to hold command UI items
	self.CommandItems = {}

	-- Flag for minimized state
	self.Minimized = false
end

function Library:SetupEvents()
	-- Click and drag for title bar to move window
	local dragging, dragInput, dragStart, startPos
	self.TitleBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = self.Holder.Position
			self.LastInput = tick()
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	self.TitleBar.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)
	RunService.RenderStepped:Connect(function()
		if dragging and dragInput then
			local delta = dragInput.Position - dragStart
			self.Holder.Position = UDim2.new(
				startPos.X.Scale,
				startPos.X.Offset + delta.X,
				startPos.Y.Scale,
				startPos.Y.Offset + delta.Y
			)
		end
	end)

	-- Settings button toggle
	self.SettingsButton.MouseButton1Click:Connect(function()
		self.SettingsPanel.Visible = not self.SettingsPanel.Visible
		self.LastInput = tick()
	end)

	-- KeepOpen toggle logic
	self.KeepOpenToggle.MouseButton1Click:Connect(function()
		self.KeepOpen = not self.KeepOpen
		self.KeepOpenToggle.Text = self.KeepOpen and "On" or "Off"
		self.LastInput = tick()
	end)

	-- EditTheme button - placeholder (can add color picker logic here)
	self.EditThemeButton.MouseButton1Click:Connect(function()
		-- For now just notify or open a color picker panel
		self.LastInput = tick()
		-- TODO: Implement color picker UI and theming
		print("Edit Theme clicked - implement your color picker here")
	end)

	-- CommandBar Enter key to run command
	self.CommandBar.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			local text = self.CommandBar.Text:match("^%s*(.-)%s*$") -- trim
			if text ~= "" then
				self:RunCommand(text)
			end
			self.CommandBar.Text = ""
			self.LastInput = tick()
		end
	end)

	-- Reset last input time on focus/typing
	self.CommandBar.Focused:Connect(function()
		self.LastInput = tick()
	end)

	-- Mouse or keyboard input resets inactivity timer
	UserInputService.InputBegan:Connect(function()
		self.LastInput = tick()
	end)
end

function Library:StartAutoMinimize()
	spawn(function()
		while true do
			task.wait(1)
			local now = tick()
			if not self.KeepOpen and now - self.LastInput > 10 then
				-- minimize
				if not self.Minimized then
					self.Minimized = true
					self.Holder:TweenSize(UDim2.new(0, 280, 0, 30), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)
					self.CommandBar.Visible = false
					self.CommandListFrame.Visible = false
					self.SettingsPanel.Visible = false
				end
			else
				-- restore
				if self.Minimized then
					self.Minimized = false
					self.Holder:TweenSize(UDim2.new(0, 280, 0, 280), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.3, true)
					self.CommandBar.Visible = true
					self.CommandListFrame.Visible = true
					-- settings panel only visible if toggled on
					self.SettingsPanel.Visible = self.SettingsPanel.Visible and true or false
				end
			end
		end
	end)
end

function Library:SetCommands(commands)
	-- commands: table of { name = string, description = string (optional) }
	self.Commands = commands or {}
	self:RefreshCommandList()
end

function Library:RefreshCommandList()
	-- Clear previous command items
	for _, item in ipairs(self.CommandItems) do
		if item and item.Destroy then
			item:Destroy()
		end
	end
	self.CommandItems = {}

	-- Add each command as a label inside CommandListFrame
	for i, cmd in ipairs(self.Commands) do
		local label = create("TextLabel", {
			Name = "Command_"..cmd.Name,
			Parent = self.CommandListFrame,
			Size = UDim2.new(1, -10, 0, 24),
			BackgroundTransparency = 1,
			TextXAlignment = Enum.TextXAlignment.Left,
			Font = Enum.Font.SourceSans,
			TextSize = 18,
			TextColor3 = Color3.new(1, 1, 1),
			Text = cmd.Name .. (cmd.Args and (" " .. cmd.Args) or ""),
			ZIndex = 10,
		})
		table.insert(self.CommandItems, label)
	end

	-- Update CanvasSize for scrolling
	task.spawn(function()
		task.wait(0.1)
		local totalSize = 0
		for _, item in ipairs(self.CommandItems) do
			totalSize = totalSize + item.AbsoluteSize.Y + 4
		end
		self.CommandListFrame.CanvasSize = UDim2.new(0, 0, 0, totalSize)
	end)
end

function Library:RunCommand(text)
	local args = {}
	for word in text:gmatch("%S+") do
		table.insert(args, word)
	end
	local cmdName = args[1] and args[1]:lower()
	if not cmdName then return end

	local cmdData
	for _, cmd in ipairs(self.Commands) do
		if cmd.Name:lower() == cmdName then
			cmdData = cmd
			break
		end
	end
	if cmdData and cmdData.Callback then
		-- pass all args after command name
		local passedArgs = {}
		for i = 2, #args do
			table.insert(passedArgs, args[i])
		end
		-- call the command callback safely
		local success, err = pcall(function()
			cmdData.Callback(unpack(passedArgs))
		end)
		if not success then
			warn("[InfiniteYieldStyleLibrary] Command error: "..tostring(err))
		end
	else
		-- Unknown command
		warn("[InfiniteYieldStyleLibrary] Unknown command: "..cmdName)
	end
end

return Library
