local Library = {}
Library.__index = Library

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function randomString(length)
	length = length or 8
	local charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	local str = ""
	for i = 1, length do
		str = str .. charset:sub(math.random(1, #charset), math.random(1, #charset))
	end
	return str
end

local function getcustomasset(path)
	-- Replace this with your actual method for loading custom assets or substitute with asset ids
	-- For testing, you could return empty string or dummy asset id
	return path
end

function Library.new(version)
	local self = setmetatable({}, Library)
	self.Version = version or "4.0"
	self.Commands = {}
	self.KeepOpen = false
	self.LastInput = tick()
	self.Minimized = false

	self:BuildUI()
	self:SetupEvents()
	self:StartAutoMinimize()

	return self
end

function Library:BuildUI()
	local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

	self.Holder = Instance.new("Frame")
	self.Holder.Name = "Holder"
	self.Holder.Parent = PlayerGui
	self.Holder.Active = true
	self.Holder.BackgroundColor3 = Color3.fromRGB(36,36,37)
	self.Holder.BorderSizePixel = 0
	self.Holder.Position = UDim2.new(0,50,0,50)
	self.Holder.Size = UDim2.new(0, 250, 0, 400)
	self.Holder.ZIndex = 10

	-- Title
	local Title = Instance.new("TextLabel")
	Title.Name = "Title"
	Title.Parent = self.Holder
	Title.Active = true
	Title.BackgroundColor3 = Color3.fromRGB(36,36,37)
	Title.BorderSizePixel = 0
	Title.Size = UDim2.new(0, 250, 0, 20)
	Title.Font = Enum.Font.SourceSans
	Title.TextSize = 18
	Title.TextColor3 = Color3.new(1,1,1)
	Title.ZIndex = 10

	do
		local emoji = ({
			["01 01"] = "ðŸŽ†",
			[(function(Year)
				local A = math.floor(Year/100)
				local B = math.floor((13+8*A)/25)
				local C = (15-B+A-math.floor(A/4))%30
				local D = (4+A-math.floor(A/4))%7
				local E = (19*(Year%19)+C)%30
				local F = (2*(Year%4)+4*(Year%7)+6*E+D)%7
				local G = (22+E+F)
				if E == 29 and F == 6 then
					return "04 19"
				elseif E == 28 and F == 6 then
					return "04 18"
				elseif 31 < G then
					return ("04 %02d"):format(G-31)
				end
				return ("03 %02d"):format(G)
			end)(tonumber(os.date("%Y")))] = "ðŸ¥š",
			["10 31"] = "ðŸŽƒ",
			["12 25"] = "ðŸŽ„"
		})[os.date("%m %d")]
		if emoji then
			Title.Text = ("%s Infinite Yield FE v%s %s"):format(emoji, self.Version, emoji)
		else
			Title.Text = "Infinite Yield FE v" .. self.Version
		end
	end

	-- Dark background for command list and settings container
	local Dark = Instance.new("Frame")
	Dark.Name = "Dark"
	Dark.Parent = self.Holder
	Dark.Active = true
	Dark.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
	Dark.BorderSizePixel = 0
	Dark.Position = UDim2.new(0, 0, 0, 45)
	Dark.Size = UDim2.new(0, 250, 0, 175)
	Dark.ZIndex = 10

	-- Command bar (text input)
	local Cmdbar = Instance.new("TextBox")
	Cmdbar.Name = "Cmdbar"
	Cmdbar.Parent = self.Holder
	Cmdbar.BackgroundTransparency = 1
	Cmdbar.BorderSizePixel = 0
	Cmdbar.Position = UDim2.new(0, 5, 0, 20)
	Cmdbar.Size = UDim2.new(0, 240, 0, 25)
	Cmdbar.Font = Enum.Font.SourceSans
	Cmdbar.TextSize = 18
	Cmdbar.TextXAlignment = Enum.TextXAlignment.Left
	Cmdbar.TextColor3 = Color3.new(1, 1, 1)
	Cmdbar.PlaceholderText = "Command Bar"
	Cmdbar.ZIndex = 10
	self.Cmdbar = Cmdbar

	-- Command list scrolling frame
	local CMDsF = Instance.new("ScrollingFrame")
	CMDsF.Name = "CMDs"
	CMDsF.Parent = self.Holder
	CMDsF.BackgroundTransparency = 1
	CMDsF.BorderSizePixel = 0
	CMDsF.Position = UDim2.new(0, 5, 0, 45)
	CMDsF.Size = UDim2.new(0, 245, 0, 175)
	CMDsF.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
	CMDsF.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	CMDsF.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	CMDsF.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	CMDsF.ScrollBarThickness = 8
	CMDsF.VerticalScrollBarInset = Enum.ScrollBarInset.Always
	CMDsF.ZIndex = 10

	self.CMDsF = CMDsF

	local cmdListLayout = Instance.new("UIListLayout")
	cmdListLayout.Parent = CMDsF
	cmdListLayout.SortOrder = Enum.SortOrder.LayoutOrder
	cmdListLayout.Padding = UDim.new(0, 4)

	self.CmdListLayout = cmdListLayout

	-- Settings Button
	local SettingsButton = Instance.new("ImageButton")
	SettingsButton.Name = "SettingsButton"
	SettingsButton.Parent = self.Holder
	SettingsButton.BackgroundTransparency = 1
	SettingsButton.Position = UDim2.new(0, 230, 0, 0)
	SettingsButton.Size = UDim2.new(0, 20, 0, 20)
	SettingsButton.Image = getcustomasset("infiniteyield/assets/settings.png")
	SettingsButton.ZIndex = 10
	self.SettingsButton = SettingsButton

	-- Settings Panel
	local Settings = Instance.new("Frame")
	Settings.Name = "Settings"
	Settings.Parent = self.Holder
	Settings.Active = true
	Settings.BackgroundColor3 = Color3.fromRGB(36, 36, 37)
	Settings.BorderSizePixel = 0
	Settings.Position = UDim2.new(0, 0, 0, 220)
	Settings.Size = UDim2.new(0, 250, 0, 175)
	Settings.ZIndex = 10
	Settings.Visible = false
	self.Settings = Settings

	-- SettingsHolder ScrollingFrame
	local SettingsHolder = Instance.new("ScrollingFrame")
	SettingsHolder.Name = "Holder"
	SettingsHolder.Parent = Settings
	SettingsHolder.BackgroundTransparency = 1
	SettingsHolder.BorderSizePixel = 0
	SettingsHolder.Size = UDim2.new(1,0,1,0)
	SettingsHolder.ScrollBarImageColor3 = Color3.fromRGB(78,78,79)
	SettingsHolder.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	SettingsHolder.CanvasSize = UDim2.new(0, 0, 0, 235)
	SettingsHolder.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	SettingsHolder.ScrollBarThickness = 8
	SettingsHolder.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
	SettingsHolder.VerticalScrollBarInset = Enum.ScrollBarInset.Always
	SettingsHolder.ZIndex = 10

	self.SettingsHolder = SettingsHolder

	-- Keep Menu Open Label and Button
	local StayOpen = Instance.new("TextLabel")
	StayOpen.Name = "StayOpen"
	StayOpen.Parent = SettingsHolder
	StayOpen.BackgroundColor3 = Color3.fromRGB(46, 46, 47)
	StayOpen.BorderSizePixel = 0
	StayOpen.BackgroundTransparency = 1
	StayOpen.Position = UDim2.new(0, 5, 0, 30)
	StayOpen.Size = UDim2.new(1, -10, 0, 20)
	StayOpen.Font = Enum.Font.SourceSans
	StayOpen.TextSize = 14
	StayOpen.Text = "Keep Menu Open"
	StayOpen.TextColor3 = Color3.new(1, 1, 1)
	StayOpen.TextXAlignment = Enum.TextXAlignment.Left
	StayOpen.ZIndex = 10

	self.StayOpenLabel = StayOpen

	local Button = Instance.new("Frame")
	Button.Name = "Button"
	Button.Parent = StayOpen
	Button.BackgroundColor3 = Color3.fromRGB(78, 78, 79)
	Button.BorderSizePixel = 0
	Button.Position = UDim2.new(1, -20, 0, 0)
	Button.Size = UDim2.new(0, 20, 0, 20)
	Button.ZIndex = 10
	self.KeepOpenButton = Button

	local On = Instance.new("Frame")
	On.Name = "On"
	On.Parent = Button
	On.BackgroundColor3 = Color3.fromRGB(150, 150, 151)
	On.BackgroundTransparency = 1
	On.BorderSizePixel = 0
	On.Position = UDim2.new(0, 2, 0, 2)
	On.Size = UDim2.new(0, 16, 0, 16)
	On.ZIndex = 10
	self.KeepOpenToggle = On

	-- Store command labels here for cleanup
	self.CommandLabels = {}
end

function Library:SetupEvents()
	-- Dragging the Holder by Title
	local dragging, dragInput, dragStart, startPos
	local Title = self.Holder:FindFirstChild("Title")

	Title.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = self.Holder.Position
			self.LastInput = tick()
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	Title.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	RunService.RenderStepped:Connect(function()
		if dragging and dragInput then
			local delta = dragInput.Position - dragStart
			self.Holder.Position = UDim2.new(
				startPos.X.Scale,
				startPos.X.Offset + delta.X,
				startPos.Y.Scale,
				startPos.Y.Offset + delta.Y
			)
		end
	end)

	-- Settings Button toggles Settings panel
	self.SettingsButton.MouseButton1Click:Connect(function()
		self.Settings.Visible = not self.Settings.Visible
		self.LastInput = tick()
	end)

	-- Keep Open toggle
	self.KeepOpenButton.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			self.KeepOpen = not self.KeepOpen
			self.LastInput = tick()
			self.KeepOpenToggle.BackgroundTransparency = self.KeepOpen and 0 or 1
		end
	end)

	-- Command Bar enter key triggers command
	self.Cmdbar.FocusLost:Connect(function(enterPressed)
		if enterPressed then
			local cmdText = self.Cmdbar.Text:match("^%s*(.-)%s*$") -- trim
			if cmdText ~= "" then
				self:RunCommand(cmdText)
			end
			self.Cmdbar.Text = ""
			self.LastInput = tick()
		end
	end)

	-- Reset inactivity timer on input
	UserInputService.InputBegan:Connect(function()
		self.LastInput = tick()
	end)
end

function Library:StartAutoMinimize()
	spawn(function()
		while true do
			task.wait(1)
			if not self.KeepOpen and tick() - self.LastInput > 10 then
				if not self.Minimized then
					self.Minimized = true
					self.Holder.Size = UDim2.new(0, 250, 0, 50)
					self.CMDsF.Visible = false
					self.Cmdbar.Visible = false
					self.Settings.Visible = false
				end
			else
				if self.Minimized then
					self.Minimized = false
					self.Holder.Size = UDim2.new(0, 250, 0, 400)
					self.CMDsF.Visible = true
					self.Cmdbar.Visible = true
				end
			end
		end
	end)
end

function Library:SetCommands(commands)
	-- commands: array of tables {Name=string, Args=string?, Callback=function}
	self.Commands = commands or {}

	-- Clear old labels
	for _, lbl in pairs(self.CommandLabels) do
		lbl:Destroy()
	end
	self.CommandLabels = {}

	-- Add command labels
	for i, cmd in ipairs(self.Commands) do
		local label = Instance.new("TextLabel")
		label.Name = "CmdLabel_" .. cmd.Name
		label.Parent = self.CMDsF
		label.BackgroundTransparency = 1
		label.Size = UDim2.new(1, -10, 0, 22)
		label.Font = Enum.Font.SourceSans
		label.TextSize = 18
		label.TextColor3 = Color3.new(1,1,1)
		label.TextXAlignment = Enum.TextXAlignment.Left
		label.ZIndex = 10
		label.Text = cmd.Name .. (cmd.Args and (" " .. cmd.Args) or "")
		table.insert(self.CommandLabels, label)
	end

	-- Update canvas size for scrolling
	task.spawn(function()
		task.wait(0.1)
		local totalHeight = 0
		for _, lbl in pairs(self.CommandLabels) do
			totalHeight = totalHeight + lbl.AbsoluteSize.Y + 4
		end
		self.CMDsF.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
	end)
end

function Library:RunCommand(text)
	local args = {}
	for word in text:gmatch("%S+") do
		table.insert(args, word)
	end
	local cmdName = args[1] and args[1]:lower()
	if not cmdName then return end

	local cmdData
	for _, cmd in ipairs(self.Commands) do
		if cmd.Name:lower() == cmdName then
			cmdData = cmd
			break
		end
	end

	if cmdData and cmdData.Callback then
		local passedArgs = {}
		for i = 2, #args do
			table.insert(passedArgs, args[i])
		end
		local success, err = pcall(function()
			cmdData.Callback(unpack(passedArgs))
		end)
		if not success then
			warn("[InfiniteYield] Command error: ".. tostring(err))
		end
	else
		warn("[InfiniteYield] Unknown command: ".. tostring(cmdName))
	end
end

return Library
